// The routines and code fragments here are related to preprocessing a time series


/*
--------------------------------------------------------------------------------

   Compute first, second, and third-order normalized orthogonal coefs
   for n data points.
   Form the dot product of c1 with a series to compute the linear slope
   Use c2 or c3 for quadratic or cubic fit.

--------------------------------------------------------------------------------
*/

void legendre_3 ( int n , double *c1 , double *c2 , double *c3 )
{
   int i ;
   double sum, mean, proj ;

/*
   Compute c1
*/

   sum = 0.0 ;
   for (i=0 ; i<n ; i++) {
      c1[i] = 2.0 * i / (n - 1.0) - 1.0 ;
      sum += c1[i] * c1[i] ;
      }

   sum = sqrt ( sum ) ;
   for (i=0 ; i<n ; i++)
      c1[i] /= sum ;

/*
   Compute c2
*/

   sum = 0.0 ;
   for (i=0 ; i<n ; i++) {
      c2[i] = c1[i] * c1[i] ;
      sum += c2[i] ;
      }

   mean = sum / n ;               // Center it and normalize to unit length

   sum = 0.0 ;
   for (i=0 ; i<n ; i++) {
      c2[i] -= mean ;
      sum += c2[i] * c2[i] ;
      }

   sum = sqrt ( sum ) ;
   for (i=0 ; i<n ; i++)
      c2[i] /= sum ;

/*
   Compute c3
*/

   sum = 0.0 ;
   for (i=0 ; i<n ; i++) {
      c3[i] = c1[i] * c1[i] * c1[i] ;
      sum += c3[i] ;
      }

   mean = sum / n ;               // Center it and normalize to unit length

   sum = 0.0 ;
   for (i=0 ; i<n ; i++) {
      c3[i] -= mean ;
      sum += c3[i] * c3[i] ;
      }

   sum = sqrt ( sum ) ;
   for (i=0 ; i<n ; i++)
      c3[i] /= sum ;

   // Remove the projection of c1

   proj = 0.0 ;
   for (i=0 ; i<n ; i++)
      proj += c1[i] * c3[i] ;

   sum = 0.0 ;
   for (i=0 ; i<n ; i++) {
      c3[i] -= proj * c1[i] ;
      sum += c3[i] * c3[i] ;
      }

   sum = sqrt ( sum ) ;
   for (i=0 ; i<n ; i++)
      c3[i] /= sum ;
}




/*
--------------------------------------------------------------------------------

   Local routine computes FFT

   There may be an even or odd number of cases,
   and we may or may not be centering the data.

   After the transform:

      If n is even
         R[0] = sum
         I[0] = 0
         R[n/2] = alternating sum
         I[n/2] = 0
         R[i] = R[n-i]
         I[i] = -I[n-i]
         We have n/2 real and n/2 imaginary unique values
         and n/2+1 complex numbers with two zero parts

      If n is odd
         R[0] = sum
         I[0] = 0
         R[i] = R[n-i]
         I[i] = -I[n-i]
         R[n/2] and I[n/2] are valid almost-Nyquist data
         We have n/2+1 real and n/2 imaginary unique values
         and n/2+1 complex numbers with one zero part

      But if we center, the sum is zero, so R[0] = I[0] = 0
         
--------------------------------------------------------------------------------
*/

void do_fft ( int n , int center , double *in , double *out , double *work , FFT *fft )
{
   int i, k ;
   double *xr, *xi, win, wsum, dsum, wsq ;

   xr = work ;
   xi = xr + n ;

/*
   It would be slightly more efficient to use the half-length FFT
   method.  But the difference is tiny and not worth the bother of
   dealing with possibly odd length series.
*/

   for (i=0 ; i<n ; i++) {
      xr[i] = in[i] ;
      xi[i] = 0.0 ;
      }

   wsum = dsum = wsq = 0.0 ;
   for (i=0 ; i<n ; i++) {
      win = (i - 0.5 * (n-1)) / (0.5 * (n+1)) ;
      win = 1.0 - win * win ;  // Welch data window
      wsum += win ;
      dsum += win * xr[i] ;
      wsq += win * win ;
      }

   if (center)
      dsum /= wsum ;                  // Weighted mean
   else
      dsum = 0.0 ;

   wsq = 1.0 / sqrt ( n * wsq ) ;     // Compensate for reduced power

   for (i=0 ; i<n ; i++) {
      win = (i - 0.5 * (n-1)) / (0.5 * (n+1)) ;
      win = 1.0 - win * win ;         // Welch data window
      win *= wsq ;                    // Compensate for reduced power
      xr[i] = win * (xr[i] - dsum) ;  // Window after centering
      }

   fft->cpx ( xr , xi , 1 ) ;  // Transform to frequency domain

   k = 0 ;

   if (! center)
      out[k++] = xr[0] ;

   for (i=1 ; i<n/2 ; i++) {
      out[k++] = xr[i] ;
      out[k++] = xi[i] ;
      }

   out[k++] = xr[n/2] ;
   if (n % 2)
      out[k++] = xi[n/2] ;
}



/*
--------------------------------------------------------------------------------------

   Do the Morlet transform

--------------------------------------------------------------------------------------
*/

static void compute_morlet (
   FFT *fft ,        // Does the FFT
   int period ,      // Period (1 / center frequency) of desired filter
   int width ,       // Width on each side of center
   int lag ,         // Lag back from current for center of filter; ideally equals width
   int lookback ,    // Number of samples in input buffer
   int n ,           // Lookback plus padding, bumped up to nearest power of two
   double *buffer ,  // Input data
   double *realval , // Real value returned here
   double *imagval , // Imaginary value returned here
   double *xr ,      // Work vector n long
   double *xi ,      // Ditto
   double *yr ,      // Ditto
   double *yi )      // Ditto
{
   int i, nyquist ;
   double mean, freq, fwidth, multiplier, f, wt ;

   nyquist = n / 2 ;   // The transform and function are symmetric around this index
   freq = 1.0 / period ;
   fwidth = 0.8 / width ;


/*
   Copy the data from the user's series to a local work area, and pad with mean as needed.
   Reverse the time order for slight simplification:
   Lag will be from start of series, and padding is at end.
*/

   mean = 0.0 ;
   for (i=0 ; i<lookback ; i++) {
      xr[i] = buffer[lookback-1-i] ;
      xi[i] = 0.0 ;
      mean += xr[i] ;
      }

   mean /= lookback ;

   while (i<n) {
      xr[i] = mean ;
      xi[i++] = 0.0 ;
      }


/*
-------------------------------------------------------------
   Do the forward transform and multiply by REAL Morlet coefs
   We need 'multiplier' to normalize the magnitude.
-------------------------------------------------------------
*/

      fft->cpx ( xr , xi , 1 ) ;  // Transform to frequency domain
      multiplier = 1.0 / (morlet_coefs ( freq , freq , fwidth , 1 ) + 1.e-140 ) ;

      for (i=1 ; i<nyquist ; i++) {     // Do just symmetric part
         f = (double) i / (double) n ;  // This frequency
         wt = multiplier * morlet_coefs ( f , freq , fwidth , 1 ) ;
         yr[i] = xr[i] * wt ;
         yi[i] = xi[i] * wt ;
         yr[n-i] = xr[n-i] * wt ;
         yi[n-i] = xi[n-i] * wt ;
         } // For all unique frequencies strictly between zero and Nyquist

      // The Morlet coef at f=0 is zero, so set yr[0] and yi[0] to zero.
      // Also, the imaginary Nyquist in yi[nyquist] is always zero by definition.
      // If this is a real transform, we need to weight the real Nyquist in
      // yr[nyquist].  But if imaginary, the function is antisymmetric and
      // crosses here.

      yr[0] = yi[0] = yi[nyquist] = 0.0 ;  // Always true
      wt = multiplier * morlet_coefs ( 0.5 , freq , fwidth , 1 ) ;
      yr[nyquist] = xr[nyquist] * wt ;

/*
   Transform back to the time domain and return lagged value.
*/

      fft->cpx ( yr , yi , -1 ) ;        // Back to time domain
      *realval = yr[lag] / n ;


/*
------------------------------------------------------------------
   Do the forward transform and multiply by IMAGINARY Morlet coefs
   We need 'multiplier' to normalize the magnitude.
------------------------------------------------------------------
*/

      multiplier = 1.0 / (morlet_coefs ( freq , freq , fwidth , 0 ) + 1.e-140 ) ;

      for (i=1 ; i<nyquist ; i++) {     // Do just symmetric part
         f = (double) i / (double) n ;  // This frequency
         wt = multiplier * morlet_coefs ( f , freq , fwidth , 0 ) ;
         yr[i] = -xi[i] * wt ;
         yi[i] = xr[i] * wt ;
         yr[n-i] = xi[n-i] * wt ;
         yi[n-i] = -xr[n-i] * wt ;
         } // For all unique frequencies strictly between zero and Nyquist

      // The Morlet coef at f=0 is zero, so set yr[0] and yi[0] to zero.
      // Also, the imaginary Nyquist in yi[nyquist] is always zero by definition.
      // The imaginary function is antisymmetric and crosses here.

      yr[0] = yi[0] = yr[nyquist] = yi[nyquist] = 0.0 ;

/*
   Transform back to the time domain and return lagged value.
*/

      fft->cpx ( yr , yi , -1 ) ;        // Back to time domain
      *imagval = -yr[lag] / n ;
} ;
